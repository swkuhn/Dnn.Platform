CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag(
	[TagID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[NameLowered] [nvarchar](255) NOT NULL,
	[Usages] [int] NULL
) ON [PRIMARY]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag ADD 
	CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Tag] PRIMARY KEY CLUSTERED 
	(
		[TagID]
	)  ON [PRIMARY] 
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag(
	[ArticleID] [int] NOT NULL,
	[TagID] [int] NOT NULL
) ON [PRIMARY]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag ADD 
	CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_ArticleTag] PRIMARY KEY CLUSTERED 
	(
	    [ArticleID] ASC,
	    [TagID] ASC
	)  ON [PRIMARY] 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagAdd
	@ModuleID int,
	@Name nvarchar(50),
	@NameLowered nvarchar(50)
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag (
	[ModuleID],
	[Name],
	[NameLowered]
) VALUES (
	@ModuleID,
	@Name,
	@NameLowered 
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagGet
	@TagID int 
AS

SELECT
	[TagID],
	[ModuleID],
	[Name],
	[NameLowered],
	[Usages] 
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
WHERE
	[TagID] = @TagID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagGetByName 
	@ModuleID int,
	@NameLowered nvarchar(50) 
AS

SELECT TOP 1 
	[TagID],
	[ModuleID],
	[Name],
	[NameLowered],
	[Usages] 
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
WHERE
	[ModuleID] = @ModuleID
	and
	[NameLowered] = @NameLowered
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagList
	@ModuleID int,
	@MaxCount int 
AS

if( @MaxCount is not null )
begin
	SET ROWCOUNT @MaxCount 
end

SELECT
	t.[TagID],
	t.[ModuleID],
	t.[Name],
	t.[NameLowered],
	t.[Usages] 
FROM 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag t
WHERE
	t.[ModuleID] = @ModuleID
ORDER BY 
	t.[Usages] DESC
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagUpdate 
	@TagID int, 
	@ModuleID int,
	@Name nvarchar(50),
	@NameLowered nvarchar(50), 
	@Usages int 
AS

UPDATE
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag 
SET 
	[ModuleID] = @ModuleID,
	[Name] = @Name,
	[NameLowered] = @NameLowered, 
	[Usages] = @Usages 
WHERE
	[TagID] = @TagID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagAdd 
	@ArticleID int,
	@TagID int 
AS

IF( (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag WHERE ArticleID = @ArticleID and TagID = @TagID) = 0 )
BEGIN
	INSERT INTO 
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag(ArticleID, TagID)
	VALUES(@ArticleID, @TagID) 

	UPDATE
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
	SET
		Usages = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag pt where pt.TagID = @TagID) 
	WHERE
		TagID = @TagID
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagDelete
	@ArticleID int 
AS

UPDATE 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag 
SET
	Usages = Usages - 1
WHERE
	TagID in (SELECT pt.TagID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag pt where ArticleID = @ArticleID)

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag 
WHERE Usages = 0

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag 
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagDeleteByTag
	@TagID int 
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag 
WHERE TagID = @TagID 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagDelete
	@TagID int
AS

exec {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagDeleteByTag @TagID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
WHERE
	[TagID] = @TagID
GO

CREATE FUNCTION {databaseOwner}{objectQualifier}Ventrian_NewsArticles_SplitTags
(@ArticleID int)
RETURNS nvarchar(2000)
AS
    BEGIN
 
    DECLARE @p_str nvarchar(2000)
    SET @p_str = ''

    SELECT @p_str = @p_str + ' ' + CAST(t.[Name] AS NVARCHAR(50))
      FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag t, {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag at
     WHERE t.TagID = at.TagID and at.ArticleID = @ArticleID

    RETURN LTRIM(@p_str)

END
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetArticleListBySearchCriteria
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetArticleListBySearchCriteria
	@ModuleID	int,
	@CurrentDate datetime,
	@AgedDate datetime,
	@CategoryID	varchar(2000),
	@CategoryIDCount	int,
	@CategoryIDExclude	varchar(2000),
	@MaxCount int, 
	@PageNumber int, 
	@PageSize int,
	@SortBy varchar(50),
	@SortDirection varchar(50),
	@IsApproved	bit,
	@IsDraft	bit,
	@KeyWords	nvarchar(255), 
	@AuthorID	int,
	@ShowPending bit,
	@ShowExpired bit,
	@ShowFeaturedOnly bit,
	@ShowNotFeaturedOnly bit,
	@ShowSecuredOnly bit,
	@ShowNotSecuredOnly bit,
	@ArticleIDs	varchar(255), 
	@TagID varchar(2000),
	@TagIDCount int
AS

-- Form Where Query

DECLARE @strWhere	nvarchar(4000)
SELECT @strWhere = 'Article.ModuleID = ' + convert(nvarchar, @ModuleId)

IF( @CurrentDate is null )
	SELECT @CurrentDate = GetDate()

IF( @ShowPending is null )
BEGIN
	SELECT @strWhere = @strWhere + ' AND (Article.StartDate is null OR (Article.StartDate < ''' + convert(nvarchar, @CurrentDate)  + ''' AND Article.StartDate < GetDate()))'
	
	IF( @AgedDate is not null )
		SELECT @strWhere = @strWhere + ' AND Article.StartDate > ''' + convert(nvarchar, @AgedDate)  + ''''
END
ELSE
BEGIN
	IF( @CurrentDate is not null AND @AgedDate is not null )
	BEGIN
		SELECT @strWhere = @strWhere + ' AND (Article.StartDate is null OR (Article.StartDate < ''' + convert(nvarchar, @CurrentDate)  + '''))'
		
		IF( @AgedDate is not null )
			SELECT @strWhere = @strWhere + ' AND Article.StartDate > ''' + convert(nvarchar, @AgedDate)  + ''''
	END
END

IF( @ShowExpired is null )
BEGIN
	SELECT @strWhere = @strWhere + ' AND (Article.EndDate is null OR Article.EndDate > ''' + convert(nvarchar, @CurrentDate)  + ''')'
END

IF (@CategoryId is not null)
	if(@CategoryIDCount is not null)
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.CategoryID in (' + @CategoryID + ') group by articleID having count(*) > ' + convert(nvarchar, @CategoryIDCount) + ')'
	else
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.CategoryID in (' + @CategoryID + '))'

IF (@CategoryIDExclude is not null)
	SELECT @strWhere = @strWhere + ' AND Article.ArticleID not in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.CategoryID in (' + @CategoryIDExclude + '))'

IF (@AuthorID is not null)
	SELECT @strWhere = @strWhere + ' AND Article.AuthorID = ' + convert(nvarchar, @AuthorID)

IF (@IsApproved = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsApproved = 1'

IF (@IsApproved = 0 )
	SELECT @strWhere = @strWhere + ' AND Article.IsApproved = 0'

IF (@IsDraft = 0)
	SELECT @strWhere = @strWhere + ' AND Article.IsDraft = 0'

IF (@IsDraft = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsDraft = 1'

IF (@ShowFeaturedOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsFeatured = 1'
	
IF (@ShowNotFeaturedOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsFeatured = 0'

IF (@ShowSecuredOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsSecure = 1'
	
IF (@ShowNotSecuredOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsSecure = 0'

IF (@Keywords is not null)
	SELECT @strWhere = @strWhere + ' AND (Article.Title LIKE ''%' + @Keywords + '%'' OR Article.Summary LIKE ''%' + @Keywords + '%'' OR ((select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page where Page.ArticleID = Article.ArticleID and Page.PageText LIKE ''%' + @Keywords + '%'') > 0))'

IF (@ArticleIDs is not null)
	SELECT @strWhere = @strWhere + ' AND Article.ArticleID in (' + @ArticleIDs + ')'
	
IF (@SortBy = 'Title') 
	SELECT @SortBy = 'Article.Title'

IF (@SortBy = 'IsFeatured DESC, Title') 
	SELECT @SortBy = 'IsFeatured DESC, Article.Title'

IF (@TagID is not null)
	if(@TagIDCount is not null)
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.TagID in (' + @TagID + ') group by articleID having count(*) > ' + convert(nvarchar, @TagIDCount) + ')'
	else
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.TagID in (' + @TagID + '))'
	
-- Set Paging Options

IF( @PageNumber is null )
	SET @PageNumber = 1

IF( @PageSize is null )
	SET @PageSize = 100

SET @PageNumber = @PageNumber - 1

DECLARE @startRowIndex int
SET @startRowIndex = (@PageNumber * @PageSize)

DECLARE @maxRow int
SET @maxRow = (@startRowIndex + @PageSize)
IF( @MaxCount is not null )
BEGIN
	IF( @MaxCount < @MaxRow )
	BEGIN
		SET ROWCOUNT @MaxCount
	END
	ELSE
	BEGIN
		SET ROWCOUNT @maxRow
	END
END
ELSE
BEGIN
	SET ROWCOUNT @maxRow
END

-- Create Temporary Table

CREATE TABLE #TempItems 
(
   ID int IDENTITY,
   ArticleID int
)

EXEC('
INSERT INTO #TempItems (ArticleID) 
SELECT 
	Article.[ArticleID]
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page on Page.ArticleID = Article.ArticleID AND Page.SortOrder = 0 LEFT OUTER JOIN 
	{databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID
WHERE ' + 
	@strWhere + '
ORDER BY 
	' + @SortBy + ' ' + @SortDirection)

SET ROWCOUNT 0

SELECT 
	Article.[ArticleID],
	Article.[AuthorID],
	Article.[ApproverID],
	Article.[CreatedDate],
	Article.[LastUpdate],
	Article.[Title],
	Article.[Summary],
	Article.[IsApproved],
	Article.[NumberOfViews],
	Article.[StartDate],
	Article.[EndDate],
	Article.[ModuleID],
	Article.[IsFeatured],
	Article.[ImageUrl],
	Article.[LastUpdateID],
	Article.[IsSecure],
	Article.[IsNewWindow],
	Article.[ImageUrl],
	Article.[Url],
	Article.[PageCount],
	Article.[CommentCount],
	Article.[Rating],
	Article.[RatingCount],
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName,
	Updated.[Email] as LastUpdateEmail,
	Updated.[UserName] as LastUpdateUserName,
	Updated.[FirstName] as LastUpdateFirstName,
	Updated.[LastName] as LastUpdateLastName,
	Updated.[DisplayName] as LastUpdateDisplayName,
	Page.PageText as 'Body',
	{databaseOwner}{objectQualifier}Ventrian_NewsArticles_SplitTags(Article.[ArticleID]) as 'Tags'   

FROM
	#TempItems t INNER JOIN 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article ON t.ArticleID = Article.ArticleID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page on Page.ArticleID = Article.ArticleID AND Page.SortOrder = 0 LEFT OUTER JOIN 
	{databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID

WHERE
	ID > @startRowIndex
	
ORDER BY
	ID

DROP TABLE #TempItems 

EXEC('
SELECT 
	COUNT(Article.ArticleID) as ''TotalRecords'' 
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article
WHERE ' + 
	@strWhere )
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetArticle
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetArticle
	@ArticleID int
AS
SELECT
	Article.[ArticleID],
	Article.[AuthorID],
	Article.[ApproverID],
	Article.[CreatedDate],
	Article.[LastUpdate],
	Article.[Title],
	Article.[Summary],
	Article.[IsApproved],
	Article.[NumberOfViews],
	Article.[IsDraft],
	Article.[StartDate],
	Article.[EndDate],
	Article.[ModuleID],
	Article.[IsFeatured],
	Article.[ImageUrl],
	Article.[LastUpdateID],
	Article.[IsSecure],
	Article.[IsNewWindow],
	Article.[ImageUrl],
	Article.[Url],
	Article.[PageCount],
	Article.[CommentCount],
	Article.[Rating],
	Article.[RatingCount],
	Article.[MetaTitle],
	Article.[MetaDescription],
	Article.[MetaKeywords],
	Article.[PageHeadText], 
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName,
	Updated.[Email] as LastUpdateEmail,
	Updated.[UserName] as LastUpdateUserName,
	Updated.[FirstName] as LastUpdateFirstName,
	Updated.[LastName] as LastUpdateLastName,
	Updated.[DisplayName] as UpdatedDisplayName,
	Page.PageText as 'Body',
	{databaseOwner}{objectQualifier}Ventrian_NewsArticles_SplitTags(Article.[ArticleID]) as 'Tags'   
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article LEFT OUTER JOIN 
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page on Page.ArticleID = Article.ArticleID AND Page.SortOrder = 0 LEFT OUTER JOIN 
		{databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID

WHERE	
	Article.[ArticleID] = @ArticleID
GO
